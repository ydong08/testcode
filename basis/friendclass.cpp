#include<iostream>
#include<cstdio>
#include<cstdlib>
#include <sys/socket.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <arpa/inet.h>
#include <errno.h>

#define BUFLEN 40
#define PORTARR 16
#define SERVER_IP "192.168.115.189"

char peer0_0[] = { /* Packet 18 */
0x47, 0x45, 0x54, 0x20, 0x2f, 0x20, 0x48, 0x54, 
0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a, 
0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x31, 0x39, 
0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x31, 0x31, 
0x35, 0x2e, 0x31, 0x38, 0x39, 0x3a, 0x31, 0x37, 
0x30, 0x39, 0x34, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 
0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 
0x20, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 
0x0d, 0x0a, 0x50, 0x72, 0x61, 0x67, 0x6d, 0x61, 
0x3a, 0x20, 0x6e, 0x6f, 0x2d, 0x63, 0x61, 0x63, 
0x68, 0x65, 0x0d, 0x0a, 0x43, 0x61, 0x63, 0x68, 
0x65, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 
0x6c, 0x3a, 0x20, 0x6e, 0x6f, 0x2d, 0x63, 0x61, 
0x63, 0x68, 0x65, 0x0d, 0x0a, 0x55, 0x70, 0x67, 
0x72, 0x61, 0x64, 0x65, 0x3a, 0x20, 0x77, 0x65, 
0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x0d, 
0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x3a, 
0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 
0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 
0x74, 0x3a, 0x37, 0x34, 0x35, 0x36, 0x0d, 0x0a, 
0x53, 0x65, 0x63, 0x2d, 0x57, 0x65, 0x62, 0x53, 
0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x56, 0x65, 
0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x31, 
0x33, 0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 
0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d, 
0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 
0x2e, 0x30, 0x20, 0x28, 0x4d, 0x61, 0x63, 0x69, 
0x6e, 0x74, 0x6f, 0x73, 0x68, 0x3b, 0x20, 0x49, 
0x6e, 0x74, 0x65, 0x6c, 0x20, 0x4d, 0x61, 0x63, 
0x20, 0x4f, 0x53, 0x20, 0x58, 0x20, 0x31, 0x30, 
0x5f, 0x31, 0x32, 0x5f, 0x34, 0x29, 0x20, 0x41, 
0x70, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x4b, 
0x69, 0x74, 0x2f, 0x35, 0x33, 0x37, 0x2e, 0x33, 
0x36, 0x20, 0x28, 0x4b, 0x48, 0x54, 0x4d, 0x4c, 
0x2c, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x47, 
0x65, 0x63, 0x6b, 0x6f, 0x29, 0x20, 0x43, 0x68, 
0x72, 0x6f, 0x6d, 0x65, 0x2f, 0x35, 0x38, 0x2e, 
0x30, 0x2e, 0x33, 0x30, 0x32, 0x39, 0x2e, 0x31, 
0x31, 0x30, 0x20, 0x53, 0x61, 0x66, 0x61, 0x72, 
0x69, 0x2f, 0x35, 0x33, 0x37, 0x2e, 0x33, 0x36, 
0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 
0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 
0x67, 0x3a, 0x20, 0x67, 0x7a, 0x69, 0x70, 0x2c, 
0x20, 0x64, 0x65, 0x66, 0x6c, 0x61, 0x74, 0x65, 
0x2c, 0x20, 0x73, 0x64, 0x63, 0x68, 0x0d, 0x0a, 
0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x4c, 
0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 
0x20, 0x7a, 0x68, 0x2d, 0x43, 0x4e, 0x2c, 0x7a, 
0x68, 0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x38, 0x2c, 
0x65, 0x6e, 0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x36, 
0x0d, 0x0a, 0x53, 0x65, 0x63, 0x2d, 0x57, 0x65, 
0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2d, 
0x4b, 0x65, 0x79, 0x3a, 0x20, 0x64, 0x77, 0x53, 
0x6e, 0x6c, 0x42, 0x76, 0x55, 0x62, 0x7a, 0x43, 
0x2b, 0x49, 0x5a, 0x71, 0x6e, 0x67, 0x67, 0x39, 
0x4f, 0x79, 0x67, 0x3d, 0x3d, 0x0d, 0x0a, 0x53, 
0x65, 0x63, 0x2d, 0x57, 0x65, 0x62, 0x53, 0x6f, 
0x63, 0x6b, 0x65, 0x74, 0x2d, 0x45, 0x78, 0x74, 
0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 
0x20, 0x70, 0x65, 0x72, 0x6d, 0x65, 0x73, 0x73, 
0x61, 0x67, 0x65, 0x2d, 0x64, 0x65, 0x66, 0x6c, 
0x61, 0x74, 0x65, 0x3b, 0x20, 0x63, 0x6c, 0x69, 
0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 
0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x62, 
0x69, 0x74, 0x73, 0x0d, 0x0a, 0x0d, 0x0a };


char peer0_3[] = { /* Packet 15 */
0x82, 0xbb, 0xb9, 0x47, 0x56, 0x2f, 0xb9, 0x7e, 
0x56, 0x2f, 0xb8, 0x46, 0x56, 0x2f, 0xb8, 0x44, 
0x56, 0x2f, 0xb9, 0x47, 0x56, 0x2e, 0xb9, 0x47, 
0x56, 0x28, 0x88, 0x76, 0x67, 0x1e, 0x8b, 0x75, 
0x56, 0x2f, 0xb9, 0x47, 0x5a, 0xc8, 0x37, 0xee, 
0xb3, 0x81, 0x0f, 0x2f, 0x23, 0x47, 0xcc, 0x47, 
0x56, 0x2f, 0xb9, 0x47, 0x53, 0x2f, 0xb9, 0x47, 
0x55, 0x2f, 0xb9, 0x47, 0x54, 0x2f, 0xb9, 0x47, 
0x56 };

bool connectServer(int port)
{
	char sendbuf[BUFLEN] = {0};
	int sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if(-1 == sockfd)
	{
		std::cout<<"socket failed" << std::endl;
		return false;
	}
	
	struct sockaddr_in addr;
	memset(&addr, 0, sizeof(addr));
	addr.sin_family = AF_INET;
	addr.sin_port = htons(port);
	inet_pton(AF_INET, SERVER_IP, &addr.sin_addr.s_addr);
	if(-1 == connect(sockfd, (struct sockaddr*)&addr, sizeof(struct sockaddr)))
	{
		std::cout<<"connect failed on port: " << port <<std::endl;
		return false;
	}
	sprintf(sendbuf, "%d-%d-%s %s", port, sockfd, "send package to", SERVER_IP);
	int len = send(sockfd, peer0_0, strlen(peer0_0), 0);
	std::cout<<"send peer0_0 end" <<std::endl;
	if(len <= 0)
	{
		std::cout<<"send peer0_0 failed on port: " << port <<": " << strerror(errno)<<std::endl;
		return false;
	}
	
	sleep(1);
	len = send(sockfd, peer0_3, strlen(peer0_3), 0);
	std::cout<<"send peer0_3 end" <<std::endl;
	if(len <= 0)
	{
		std::cout<<"send peer0_3 failed on port: " << port <<": " << strerror(errno)<<std::endl;
		return false;
	}
	std::cout<<std::endl;
	return true;
	
}

int main()
{
	int porta[PORTARR] = {17094,17092,17093,17100,17101,17102,17103,17104,17200,17201,17202,17203,17300,17301,17302,17303};
	for(int i = 0; i < PORTARR; i++)
	{
		(void)connectServer(porta[i]);
		sleep(2);
	}
	std::cout<< std::endl;
	return 0;
	
}

